import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:ipad_qr_scan_frontend/apis/visitorApi.dart';
import 'package:ipad_qr_scan_frontend/models/meetingModel.dart';
// import 'package:ipad_qr_scan_frontend/models/visitorModel.dart';
import 'package:flutter_svg/flutter_svg.dart';

class RegisterPage2 extends StatefulWidget {
  RegisterPage2(
      {Key? key, required this.name, required this.email, required this.ic})
      : super(key: key);
  final String name, email, ic;
  @override
  State<RegisterPage2> createState() => _RegisterPage2State();
}

class _RegisterPage2State extends State<RegisterPage2> {
  late Meeting dropdownvalue = const Meeting(
      email: '--No email--',
      time: '--No Time--',
      venue: '--No venue--',
      host: '--Select host--',
      visitor: '--No Visitor--');
  late List<Meeting> host;
  Future<Meeting> getVisitor() {
    Future<Meeting> host = fetchMeeting(widget.ic);
    return host;
  }

  Future<List<Meeting>> convertMeetingToList(
      Future<Meeting> futureModel) async {
    Meeting model = await futureModel;
    List<Meeting> host = [model];
    return host;
  }

  @override
  void initState() {
    super.initState();
    getVisitor();
    convertMeetingToList(getVisitor());
  }

  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;
    final Widget svgPetronas =
        SvgPicture.asset('assets/petronas-logo-white.svg', width: width * .2);
    final ButtonStyle style = ElevatedButton.styleFrom(
      backgroundColor: Color(0XFF00A19C),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(8.0),
      ),
    );
    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: false,
        backgroundColor: Color(0XFF222222),
        title: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            ElevatedButton(
              style: style,
              onPressed: () {
                Navigator.of(context)
                  ..pop()
                  ..pop();
              },
              child: Center(
                child: Row(
                  children: [
                    Icon(
                      Icons.arrow_back,
                      size: width * .02,
                      color: Colors.white,
                    ),
                    SizedBox(width: width * .01),
                    Text(
                      'Go Back',
                      style:
                          TextStyle(color: Colors.white, fontSize: width * .02),
                    ),
                  ],
                ),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(8),
              child: Align(child: svgPetronas),
            ),
          ],
        ),
      ),
      body: Center(
          child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            'Welcome ${widget.name}!',
            style: TextStyle(
                color: const Color(0XFF101828),
                fontSize: MediaQuery.of(context).size.width * .05,
                fontWeight: FontWeight.bold),
          ),
          SizedBox(
            height: MediaQuery.of(context).size.height * .01,
          ),
          Container(
            width: MediaQuery.of(context).size.width * .7,
            alignment: Alignment.centerLeft,
            child: Text(
              "Who's your host?",
              style: TextStyle(
                color: const Color(0XFF101828),
                fontSize: MediaQuery.of(context).size.width * .03,
              ),
            ),
          ),
          Container(
            height: MediaQuery.of(context).size.width * .07,
            width: MediaQuery.of(context).size.width * .7,
            padding: EdgeInsets.symmetric(
              horizontal: MediaQuery.of(context).size.width * .01,
              vertical: MediaQuery.of(context).size.height * .01,
            ),
            decoration: BoxDecoration(
              color: Colors.transparent,
              border: Border.all(
                color: Colors.grey,
                width: 3,
              ),
              borderRadius: BorderRadius.circular(10),
            ),
            child: FutureBuilder<List<Meeting>>(
                future: convertMeetingToList(getVisitor()),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return CircularProgressIndicator();
                  } else if (snapshot.hasError) {
                    return Text('Error: ${snapshot.error}');
                  } else if (snapshot.hasData) {
                    print("this is data");
                    print(snapshot.data![0].email);
                    return DropdownButton<Meeting>(
                      value: dropdownvalue,
                      onChanged: (newValue) {
                        setState(() {
                          dropdownvalue = newValue!;
                        });
                      },
                      items: snapshot.data
                          ?.map<DropdownMenuItem<Meeting>>((Meeting model) {
                        return DropdownMenuItem<Meeting>(
                          value: model,
                          child: Text(model.host),
                        );
                      }).toList(),
                    );
                  } else {
                    return Text("try");
                  }
                }),
          )
        ],
      )),
    );
  }
}
